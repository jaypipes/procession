// Code generated by protoc-gen-go.
// source: search.proto
// DO NOT EDIT!

package procession

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SortDirection int32

const (
	SortDirection_ASC  SortDirection = 0
	SortDirection_DESC SortDirection = 1
)

var SortDirection_name = map[int32]string{
	0: "ASC",
	1: "DESC",
}
var SortDirection_value = map[string]int32{
	"ASC":  0,
	"DESC": 1,
}

func (x SortDirection) String() string {
	return proto.EnumName(SortDirection_name, int32(x))
}
func (SortDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// Options for sorting and pagination of list queries
type SearchOptions struct {
	SortFields     []string        `protobuf:"bytes,1,rep,name=sort_fields,json=sortFields" json:"sort_fields,omitempty"`
	SortDirections []SortDirection `protobuf:"varint,2,rep,packed,name=sort_directions,json=sortDirections,enum=procession.SortDirection" json:"sort_directions,omitempty"`
}

func (m *SearchOptions) Reset()                    { *m = SearchOptions{} }
func (m *SearchOptions) String() string            { return proto.CompactTextString(m) }
func (*SearchOptions) ProtoMessage()               {}
func (*SearchOptions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *SearchOptions) GetSortFields() []string {
	if m != nil {
		return m.SortFields
	}
	return nil
}

func (m *SearchOptions) GetSortDirections() []SortDirection {
	if m != nil {
		return m.SortDirections
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchOptions)(nil), "procession.SearchOptions")
	proto.RegisterEnum("procession.SortDirection", SortDirection_name, SortDirection_value)
}

func init() { proto.RegisterFile("search.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x4d, 0x2c,
	0x4a, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x28, 0xca, 0x4f, 0x4e, 0x2d,
	0x2e, 0xce, 0xcc, 0xcf, 0x53, 0x2a, 0xe1, 0xe2, 0x0d, 0x06, 0xcb, 0xf9, 0x17, 0x94, 0x64, 0xe6,
	0xe7, 0x15, 0x0b, 0xc9, 0x73, 0x71, 0x17, 0xe7, 0x17, 0x95, 0xc4, 0xa7, 0x65, 0xa6, 0xe6, 0xa4,
	0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0x71, 0x81, 0x84, 0xdc, 0xc0, 0x22, 0x42, 0x4e,
	0x5c, 0xfc, 0x60, 0x05, 0x29, 0x99, 0x45, 0xa9, 0xc9, 0x60, 0x3d, 0x12, 0x4c, 0x0a, 0xcc, 0x1a,
	0x7c, 0x46, 0x92, 0x7a, 0x08, 0x73, 0xf5, 0x82, 0xf3, 0x8b, 0x4a, 0x5c, 0x60, 0x2a, 0x82, 0xf8,
	0x8a, 0x91, 0xb9, 0xc5, 0x5a, 0x4a, 0x5c, 0xbc, 0x28, 0x0a, 0x84, 0xd8, 0xb9, 0x98, 0x1d, 0x83,
	0x9d, 0x05, 0x18, 0x84, 0x38, 0xb8, 0x58, 0x5c, 0x5c, 0x83, 0x9d, 0x05, 0x18, 0x93, 0xd8, 0xc0,
	0x8e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x67, 0x67, 0xd8, 0xbc, 0x00, 0x00, 0x00,
}
