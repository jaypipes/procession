syntax = "proto3";

package procession;

import "authz.proto";
import "organization.proto";
import "user.proto";

// The IAM gRPC service handles storage and operations for users,
// organizations, authorization, etc.
service IAM {
    // Returns information about a specific role
    rpc role_get(RoleGetRequest) returns (Role) {}

    // Deletes a specified role
    rpc role_delete(RoleDeleteRequest) returns (RoleDeleteResponse) {}

    // Set information about a specific role
    rpc role_set(RoleSetRequest) returns (RoleSetResponse) {}

    // Returns information about multiple roles
    rpc role_list(RoleListRequest) returns (stream Role) {}

    // Returns information about a specific user
    rpc user_get(UserGetRequest) returns (User) {}

    // Deletes a specified user
    rpc user_delete(UserDeleteRequest) returns (UserDeleteResponse) {}

    // Set information about a specific user
    rpc user_set(UserSetRequest) returns (UserSetResponse) {}

    // Returns information about multiple users
    rpc user_list(UserListRequest) returns (stream User) {}

    // List users belonging to a user
    rpc user_members_list(UserMembersListRequest) returns (stream Organization) {}

    // Returns information about a specific organization
    rpc organization_get(OrganizationGetRequest) returns (Organization) {}

    // Deletes a specified organization
    rpc organization_delete(OrganizationDeleteRequest) returns (OrganizationDeleteResponse) {}

    // Set information about a specific organization
    rpc organization_set(OrganizationSetRequest) returns (OrganizationSetResponse) {}

    // Returns information about multiple organizations
    rpc organization_list(OrganizationListRequest) returns (stream Organization) {}

    // Add or remove users from an organization
    rpc organization_members_set(OrganizationMembersSetRequest) returns (OrganizationMembersSetResponse) {}

    // List users belonging to an organization
    rpc organization_members_list(OrganizationMembersListRequest) returns (stream User) {}
}
