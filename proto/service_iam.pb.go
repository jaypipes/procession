// Code generated by protoc-gen-go.
// source: service_iam.proto
// DO NOT EDIT!

package procession

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IAM service

type IAMClient interface {
	// Returns information about a specific user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	// Set information about a specific user
	SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*ActionReply, error)
}

type iAMClient struct {
	cc *grpc.ClientConn
}

func NewIAMClient(cc *grpc.ClientConn) IAMClient {
	return &iAMClient{cc}
}

func (c *iAMClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/procession.IAM/get_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*ActionReply, error) {
	out := new(ActionReply)
	err := grpc.Invoke(ctx, "/procession.IAM/set_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IAM service

type IAMServer interface {
	// Returns information about a specific user
	GetUser(context.Context, *GetUserRequest) (*User, error)
	// Set information about a specific user
	SetUser(context.Context, *SetUserRequest) (*ActionReply, error)
}

func RegisterIAMServer(s *grpc.Server, srv IAMServer) {
	s.RegisterService(&_IAM_serviceDesc, srv)
}

func _IAM_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).SetUser(ctx, req.(*SetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "procession.IAM",
	HandlerType: (*IAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_user",
			Handler:    _IAM_GetUser_Handler,
		},
		{
			MethodName: "set_user",
			Handler:    _IAM_SetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_iam.proto",
}

func init() { proto.RegisterFile("service_iam.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x8d, 0xcf, 0x4c, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a,
	0x28, 0xca, 0x4f, 0x4e, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0x93, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd,
	0xcf, 0x83, 0xc8, 0x48, 0x71, 0x95, 0x16, 0xa7, 0x16, 0x41, 0xd8, 0x46, 0x2d, 0x8c, 0x5c, 0xcc,
	0x9e, 0x8e, 0xbe, 0x42, 0x56, 0x5c, 0x1c, 0xe9, 0xa9, 0x25, 0xf1, 0x20, 0x19, 0x21, 0x29, 0x3d,
	0x84, 0x56, 0x3d, 0xf7, 0xd4, 0x92, 0xd0, 0xe2, 0xd4, 0xa2, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2,
	0x12, 0x29, 0x01, 0x64, 0x39, 0x90, 0x84, 0x12, 0x83, 0x90, 0x23, 0x17, 0x47, 0x31, 0x56, 0xbd,
	0xc1, 0xa8, 0x7a, 0xc5, 0x91, 0xe5, 0x1c, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0x82, 0x52, 0x0b, 0x72,
	0x2a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0xae, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x16,
	0xbb, 0x79, 0xc8, 0x00, 0x00, 0x00,
}
