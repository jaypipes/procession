// Code generated by protoc-gen-go.
// source: service_iam.proto
// DO NOT EDIT!

package procession

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IAM service

type IAMClient interface {
	// Returns information about a specific user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	// Set information about a specific user
	SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*SetUserResponse, error)
	// Returns information about multiple users
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (IAM_UserListClient, error)
	// Returns information about a specific organization
	OrganizationGet(ctx context.Context, in *OrganizationGetRequest, opts ...grpc.CallOption) (*Organization, error)
	// Set information about a specific organization
	OrganizationSet(ctx context.Context, in *OrganizationSetRequest, opts ...grpc.CallOption) (*OrganizationSetResponse, error)
	// Returns information about multiple organizations
	OrganizationList(ctx context.Context, in *OrganizationListRequest, opts ...grpc.CallOption) (IAM_OrganizationListClient, error)
}

type iAMClient struct {
	cc *grpc.ClientConn
}

func NewIAMClient(cc *grpc.ClientConn) IAMClient {
	return &iAMClient{cc}
}

func (c *iAMClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/procession.IAM/get_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*SetUserResponse, error) {
	out := new(SetUserResponse)
	err := grpc.Invoke(ctx, "/procession.IAM/set_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (IAM_UserListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IAM_serviceDesc.Streams[0], c.cc, "/procession.IAM/user_list", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMUserListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAM_UserListClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type iAMUserListClient struct {
	grpc.ClientStream
}

func (x *iAMUserListClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAMClient) OrganizationGet(ctx context.Context, in *OrganizationGetRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := grpc.Invoke(ctx, "/procession.IAM/organization_get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) OrganizationSet(ctx context.Context, in *OrganizationSetRequest, opts ...grpc.CallOption) (*OrganizationSetResponse, error) {
	out := new(OrganizationSetResponse)
	err := grpc.Invoke(ctx, "/procession.IAM/organization_set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) OrganizationList(ctx context.Context, in *OrganizationListRequest, opts ...grpc.CallOption) (IAM_OrganizationListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IAM_serviceDesc.Streams[1], c.cc, "/procession.IAM/organization_list", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMOrganizationListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAM_OrganizationListClient interface {
	Recv() (*Organization, error)
	grpc.ClientStream
}

type iAMOrganizationListClient struct {
	grpc.ClientStream
}

func (x *iAMOrganizationListClient) Recv() (*Organization, error) {
	m := new(Organization)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for IAM service

type IAMServer interface {
	// Returns information about a specific user
	GetUser(context.Context, *GetUserRequest) (*User, error)
	// Set information about a specific user
	SetUser(context.Context, *SetUserRequest) (*SetUserResponse, error)
	// Returns information about multiple users
	UserList(*UserListRequest, IAM_UserListServer) error
	// Returns information about a specific organization
	OrganizationGet(context.Context, *OrganizationGetRequest) (*Organization, error)
	// Set information about a specific organization
	OrganizationSet(context.Context, *OrganizationSetRequest) (*OrganizationSetResponse, error)
	// Returns information about multiple organizations
	OrganizationList(*OrganizationListRequest, IAM_OrganizationListServer) error
}

func RegisterIAMServer(s *grpc.Server, srv IAMServer) {
	s.RegisterService(&_IAM_serviceDesc, srv)
}

func _IAM_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).SetUser(ctx, req.(*SetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_UserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMServer).UserList(m, &iAMUserListServer{stream})
}

type IAM_UserListServer interface {
	Send(*User) error
	grpc.ServerStream
}

type iAMUserListServer struct {
	grpc.ServerStream
}

func (x *iAMUserListServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _IAM_OrganizationGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).OrganizationGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/OrganizationGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).OrganizationGet(ctx, req.(*OrganizationGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_OrganizationSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).OrganizationSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/OrganizationSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).OrganizationSet(ctx, req.(*OrganizationSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_OrganizationList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrganizationListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMServer).OrganizationList(m, &iAMOrganizationListServer{stream})
}

type IAM_OrganizationListServer interface {
	Send(*Organization) error
	grpc.ServerStream
}

type iAMOrganizationListServer struct {
	grpc.ServerStream
}

func (x *iAMOrganizationListServer) Send(m *Organization) error {
	return x.ServerStream.SendMsg(m)
}

var _IAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "procession.IAM",
	HandlerType: (*IAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_user",
			Handler:    _IAM_GetUser_Handler,
		},
		{
			MethodName: "set_user",
			Handler:    _IAM_SetUser_Handler,
		},
		{
			MethodName: "organization_get",
			Handler:    _IAM_OrganizationGet_Handler,
		},
		{
			MethodName: "organization_set",
			Handler:    _IAM_OrganizationSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "user_list",
			Handler:       _IAM_UserList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "organization_list",
			Handler:       _IAM_OrganizationList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_iam.proto",
}

func init() { proto.RegisterFile("service_iam.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x3b, 0x06, 0x32, 0xdf, 0x69, 0x7b, 0x27, 0xc9, 0x6e, 0xf1, 0x5e, 0x86, 0xde, 0x3c,
	0x08, 0x1e, 0x64, 0x08, 0x8a, 0xb0, 0xa1, 0x37, 0x09, 0x75, 0x3c, 0x4a, 0x40, 0x93, 0x9a, 0xf7,
	0xe6, 0xc1, 0xaf, 0xe9, 0x17, 0x1a, 0x5d, 0xa1, 0x4d, 0x4b, 0x9b, 0x5b, 0xe0, 0xf7, 0xfe, 0xbf,
	0xbc, 0x7f, 0x02, 0x2b, 0xa6, 0xf0, 0x6b, 0x0f, 0x64, 0x6c, 0xf1, 0x9d, 0x57, 0xc1, 0x8b, 0x47,
	0xa8, 0x82, 0x3f, 0x10, 0xb3, 0xf5, 0x4e, 0xa1, 0x0f, 0x65, 0xe1, 0xec, 0x5f, 0x21, 0xd6, 0xbb,
	0x86, 0x2b, 0x38, 0x32, 0x85, 0xe6, 0x7c, 0xf3, 0x3f, 0x87, 0xf9, 0xd3, 0xc3, 0x0b, 0xde, 0xc1,
	0xa2, 0x24, 0x31, 0x35, 0x41, 0x95, 0x77, 0x82, 0x7c, 0x4b, 0xf2, 0xc6, 0x14, 0x76, 0xf4, 0x73,
	0x24, 0x16, 0xb5, 0x8c, 0x59, 0x0d, 0x74, 0x86, 0x8f, 0xb0, 0xe0, 0xd1, 0xec, 0xbe, 0x9f, 0x5d,
	0x8f, 0x32, 0xae, 0xbc, 0x63, 0xd2, 0x19, 0xde, 0xc3, 0x65, 0xad, 0x30, 0x5f, 0x96, 0x05, 0xd7,
	0xc3, 0x7b, 0x9e, 0x2d, 0x4b, 0x62, 0x89, 0xcd, 0x0c, 0x77, 0xb0, 0x8c, 0xcb, 0x9a, 0x92, 0x04,
	0x75, 0x3c, 0xf9, 0x1a, 0xd1, 0x2d, 0xb5, 0xb6, 0xab, 0xa9, 0x19, 0x9d, 0xe1, 0xc7, 0xc0, 0xc9,
	0x29, 0xe7, 0xbe, 0x73, 0x5e, 0x27, 0x67, 0xda, 0xca, 0xef, 0xb0, 0xea, 0xe9, 0xcf, 0xd5, 0x27,
	0xb3, 0xf1, 0x13, 0x24, 0x96, 0xde, 0xcc, 0x3e, 0x2f, 0xce, 0x9f, 0x7b, 0x7b, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x58, 0xa9, 0x69, 0xde, 0x1d, 0x02, 0x00, 0x00,
}
