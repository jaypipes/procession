// Code generated by protoc-gen-go.
// source: service_iam.proto
// DO NOT EDIT!

package procession

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IAM service

type IAMClient interface {
	// Returns information about a specific user
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	// Set information about a specific user
	SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*SetUserResponse, error)
	// Returns information about multiple users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (IAM_ListUsersClient, error)
	// Returns information about a specific organization
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// Returns information about multiple organizations
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (IAM_ListOrganizationsClient, error)
}

type iAMClient struct {
	cc *grpc.ClientConn
}

func NewIAMClient(cc *grpc.ClientConn) IAMClient {
	return &iAMClient{cc}
}

func (c *iAMClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/procession.IAM/get_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) SetUser(ctx context.Context, in *SetUserRequest, opts ...grpc.CallOption) (*SetUserResponse, error) {
	out := new(SetUserResponse)
	err := grpc.Invoke(ctx, "/procession.IAM/set_user", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (IAM_ListUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IAM_serviceDesc.Streams[0], c.cc, "/procession.IAM/list_users", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAM_ListUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type iAMListUsersClient struct {
	grpc.ClientStream
}

func (x *iAMListUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iAMClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := grpc.Invoke(ctx, "/procession.IAM/get_organization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (IAM_ListOrganizationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_IAM_serviceDesc.Streams[1], c.cc, "/procession.IAM/list_organizations", opts...)
	if err != nil {
		return nil, err
	}
	x := &iAMListOrganizationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IAM_ListOrganizationsClient interface {
	Recv() (*Organization, error)
	grpc.ClientStream
}

type iAMListOrganizationsClient struct {
	grpc.ClientStream
}

func (x *iAMListOrganizationsClient) Recv() (*Organization, error) {
	m := new(Organization)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for IAM service

type IAMServer interface {
	// Returns information about a specific user
	GetUser(context.Context, *GetUserRequest) (*User, error)
	// Set information about a specific user
	SetUser(context.Context, *SetUserRequest) (*SetUserResponse, error)
	// Returns information about multiple users
	ListUsers(*ListUsersRequest, IAM_ListUsersServer) error
	// Returns information about a specific organization
	GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error)
	// Returns information about multiple organizations
	ListOrganizations(*ListOrganizationsRequest, IAM_ListOrganizationsServer) error
}

func RegisterIAMServer(s *grpc.Server, srv IAMServer) {
	s.RegisterService(&_IAM_serviceDesc, srv)
}

func _IAM_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).SetUser(ctx, req.(*SetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMServer).ListUsers(m, &iAMListUsersServer{stream})
}

type IAM_ListUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type iAMListUsersServer struct {
	grpc.ServerStream
}

func (x *iAMListUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

func _IAM_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/procession.IAM/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAM_ListOrganizations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListOrganizationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IAMServer).ListOrganizations(m, &iAMListOrganizationsServer{stream})
}

type IAM_ListOrganizationsServer interface {
	Send(*Organization) error
	grpc.ServerStream
}

type iAMListOrganizationsServer struct {
	grpc.ServerStream
}

func (x *iAMListOrganizationsServer) Send(m *Organization) error {
	return x.ServerStream.SendMsg(m)
}

var _IAM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "procession.IAM",
	HandlerType: (*IAMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_user",
			Handler:    _IAM_GetUser_Handler,
		},
		{
			MethodName: "set_user",
			Handler:    _IAM_SetUser_Handler,
		},
		{
			MethodName: "get_organization",
			Handler:    _IAM_GetOrganization_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "list_users",
			Handler:       _IAM_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "list_organizations",
			Handler:       _IAM_ListOrganizations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_iam.proto",
}

func init() { proto.RegisterFile("service_iam.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x13, 0x05, 0x09, 0x73, 0x8a, 0x73, 0x92, 0xd5, 0xd3, 0xe2, 0x39, 0x04, 0xbd, 0x79,
	0xd2, 0x83, 0x88, 0xa0, 0x08, 0x11, 0xc1, 0x5b, 0x48, 0xc3, 0x10, 0x16, 0xda, 0xdd, 0x74, 0x67,
	0xd3, 0x43, 0x7f, 0x79, 0x8f, 0x25, 0x09, 0xa5, 0xd3, 0x10, 0x4a, 0x6f, 0x0b, 0xdf, 0x9b, 0x8f,
	0xf7, 0x58, 0xb8, 0x65, 0xf2, 0x1b, 0x53, 0x53, 0x69, 0xaa, 0x55, 0xd6, 0x7a, 0x17, 0x1c, 0x42,
	0xeb, 0x5d, 0x4d, 0xcc, 0xc6, 0x59, 0x85, 0xce, 0x37, 0x95, 0x35, 0xdb, 0x2a, 0x18, 0x67, 0x47,
	0xae, 0xa0, 0x63, 0xf2, 0xe3, 0xfb, 0x69, 0x77, 0x05, 0xd7, 0x9f, 0x6f, 0xdf, 0xf8, 0x02, 0x49,
	0x43, 0xa1, 0xec, 0x09, 0xaa, 0xec, 0x28, 0xc8, 0x3e, 0x28, 0xfc, 0x31, 0xf9, 0x82, 0xd6, 0x1d,
	0x71, 0x50, 0xa9, 0x64, 0x3d, 0xd0, 0x11, 0xbe, 0x43, 0xc2, 0xb3, 0xb7, 0xbf, 0xa7, 0xb7, 0xf7,
	0xb3, 0x8c, 0x5b, 0x67, 0x99, 0x74, 0x84, 0xaf, 0x00, 0x4b, 0xc3, 0xa3, 0x87, 0xf1, 0x41, 0x86,
	0xbf, 0x0c, 0x0f, 0x69, 0x3e, 0x53, 0x23, 0x8f, 0xb1, 0x80, 0xb4, 0x1f, 0x21, 0x27, 0xa3, 0x9e,
	0x8c, 0xf9, 0x11, 0xf0, 0x60, 0xbb, 0x93, 0x19, 0x19, 0xd0, 0x11, 0xfe, 0x03, 0x0e, 0xad, 0xa4,
	0x94, 0xf1, 0x71, 0xda, 0x4e, 0x5e, 0xf1, 0x05, 0xde, 0x3c, 0x5e, 0xdc, 0x0c, 0x3f, 0xf0, 0xbc,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x5a, 0x5f, 0x31, 0xc2, 0x01, 0x00, 0x00,
}
